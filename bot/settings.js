import { Markup } from 'telegraf';
import { dbUpdateUserModel } from '../db/users.js';
import { dbGetUser } from '../db/users.js';
import { MODELS, DEFAULT_MODEL_KEY } from '../const.js';

export async function handleStart(ctx) {
  const message = [
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM'–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–∞–º –≤–µ—Ä–Ω—ë—Ç—Å—è –æ—Ç–≤–µ—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏.",
    '',
    '‚ú® –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏, üß† (—É–º–Ω—ã–µ –∏ –¥–æ—Ä–æ–≥–∏–µ) –∏ üöÄ (–±—ã—Å—Ç—Ä—ã–µ –∏ –¥–µ—à—ë–≤—ã–µ):',
    '  ‚û§ ChatGPT 4o üß†',
    '  ‚û§ ChatGPT 4o mini üöÄ',
    '  ‚û§ Claude 3.5 Sonnet üß†',
    '  ‚û§ Claude 3 Haiku üöÄ',
    '',
    'üí≠ –ö–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞), –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –≤—ã–¥–µ–ª–∏ –∏—Ö, —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤–º–µ—Å—Ç–µ —Å –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.',
    '',
    '‚öôÔ∏è –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:',
    'üëâ /choosemodel - –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏;',
    'üëâ /statistics - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏;',
  ];
  await ctx.reply(message.join('\n'));
}

export async function handleChooseModel(ctx) {
  const tgId = ctx.from.id;
  const user = await dbGetUser(tgId);
  const currentModelKey = user?.selected_model_key || DEFAULT_MODEL_KEY;
  const modelKeys = Object.keys(MODELS);
  const keyboard = Markup.inlineKeyboard(
    modelKeys.map((modelKey) => {
      const isSelected = modelKey === currentModelKey;
      const buttonText = isSelected ? `‚úÖ ${MODELS[modelKey].buttonText} ‚úÖ` : MODELS[modelKey].buttonText;
      return [Markup.button.callback(buttonText, `select_model:${modelKey}`)];
    })
  );
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', keyboard);
}

export async function handleModelSelection(ctx) {
  const modelKey = ctx.match[1];
  const tgId = ctx.from.id.toString();
  const success = await dbUpdateUserModel(tgId, modelKey);
  if (success) {
    await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${modelKey}`);
    await ctx.editMessageText(`–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${MODELS[modelKey].buttonText}`);
  } else {
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏');
  }
}
